name: E2E Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout application repository
    - name: Checkout Application Code
      uses: actions/checkout@v4
      with:
        path: app
    
    # 2. Setup Node.js for application
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    # 3. Install backend dependencies
    - name: Install Backend Dependencies
      run: |
        cd app/backend
        npm install
    
    # 4. Install frontend dependencies
    - name: Install Frontend Dependencies
      run: |
        cd app/frontend
        npm install
    
    # 5. Start backend server in background
    - name: Start Backend Server
      run: |
        cd app/backend
        npm start &
        echo $! > backend.pid
        # Wait for backend to be ready
        sleep 10
        curl -f http://localhost:3001 || curl -f http://localhost:3001/api/health || echo "Backend started"
    
    # 6. Build and start frontend
    - name: Build and Start Frontend
      run: |
        cd app/frontend
        npm run build
        npx serve -s build -l 3000 &
        echo $! > frontend.pid
        # Wait for frontend to be ready
        sleep 15
        curl -f http://localhost:3000 || echo "Frontend started"
    
    # 7. Verify services are running
    - name: Health Check Services
      run: |
        echo "Checking backend on port 3001..."
        curl -f http://localhost:3001 || echo "Backend health check failed but continuing..."
        echo "Checking frontend on port 3000..."
        curl -f http://localhost:3000 || echo "Frontend health check failed but continuing..."
        netstat -tulpn | grep :300
    
    # 8. Checkout test repository
    - name: Checkout Test Repository
      uses: actions/checkout@v4
      with:
        repository: mehmet-alatas/testframework
        path: tests
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # 9. Setup Java for tests
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'maven'
    
    # 10. Install Chrome for headless testing
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
    
    # 11. Run E2E Tests
    - name: Run E2E Tests
      run: |
        cd tests
        # Run all tests with clean install
        mvn clean install || true
        
        # Alternative test execution commands (commented out):
        # mvn clean test -Dcucumber.filter.tags="@smoke or @regression" || true
        # mvn test -Dcucumber.filter.tags="@api" || true
        # mvn test -Dcucumber.filter.tags="@ui" || true
        # mvn test -Dcucumber.filter.tags="@login" || true
        # mvn test -Dcucumber.filter.tags="@bug_management" || true
    
    # 12. Generate test reports
    - name: Generate Test Reports
      run: |
        cd tests
        # Generate Cucumber reports
        mvn verify -DskipTests || true
    
    # 13. Upload test reports as artifacts
    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          tests/target/cucumber-reports/
          tests/target/surefire-reports/
          tests/target/site/
        retention-days: 30
    
    # 14. Upload screenshots on failure
    - name: Upload Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-screenshots
        path: tests/screenshots/
        retention-days: 7
    
    # 15. Cleanup background processes
    - name: Cleanup Background Processes
      if: always()
      run: |
        # Kill backend process
        if [ -f app/backend/backend.pid ]; then
          kill $(cat app/backend/backend.pid) || true
        fi
        # Kill frontend process  
        if [ -f app/frontend/frontend.pid ]; then
          kill $(cat app/frontend/frontend.pid) || true
        fi
        # Kill any remaining processes on ports 3000 and 3001
        sudo kill -9 $(sudo lsof -t -i:3000) || true
        sudo kill -9 $(sudo lsof -t -i:3001) || true

    # 16. Comment PR with test results (optional)
    - name: Comment Test Results on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = 'tests/target/cucumber-reports/cucumber-html-reports/overview-features.html';
          
          if (fs.existsSync(path)) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ§ª E2E Test Results are ready! Check the artifacts section for detailed reports.'
            });
          }
