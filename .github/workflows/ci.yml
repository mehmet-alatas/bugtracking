name: E2E Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout application repository
    - name: Checkout Application Code
      uses: actions/checkout@v4
      with:
        path: app
    
    # 2. Setup Node.js for application
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    # 3. Install backend dependencies
    - name: Install Backend Dependencies
      run: |
        cd app/backend
        npm install
    
    # 4. Install serve globally for frontend
    - name: Install Serve Package
      run: npm install -g serve
    - name: Install Frontend Dependencies
      run: |
        cd app/frontend
        npm install
    
    # 5. Start backend server in background
    - name: Start Backend Server
      run: |
        cd app/backend
        npm start &
        echo $! > backend.pid
        # Wait for backend to be ready
        sleep 10
        curl -f http://localhost:3001 || curl -f http://localhost:3001/api/health || echo "Backend started"
    
    # 6. Build and start frontend
    - name: Build and Start Frontend
      run: |
        cd app/frontend
        # Disable treating warnings as errors in CI
        CI=false npm run build
        npx serve -s build -l 3000 &
        echo $! > frontend.pid
        # Wait for frontend to be ready
        sleep 15
        curl -f http://localhost:3000 || echo "Frontend started"
    
    # 7. Verify services are running
    - name: Health Check Services
      run: |
        echo "Checking backend on port 3001..."
        curl -f http://localhost:3001 || echo "Backend health check failed but continuing..."
        echo "Checking frontend on port 3000..."
        curl -f http://localhost:3000 || echo "Frontend health check failed but continuing..."
        netstat -tulpn | grep :300
    
    # 8. Checkout test repository
    - name: Checkout Test Repository
      uses: actions/checkout@v4
      with:
        repository: mehmet-alatas/testframework
        path: tests
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # 9. Setup Java for tests
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'maven'
    
    # 10. Install Chrome for headless testing
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
    
    # 11. Run E2E Tests and Capture Cucumber Report URL
    - name: Run E2E Tests
      run: |
        cd tests
        # Check if cucumber.properties exists
        if [ ! -f src/test/resources/cucumber.properties ]; then
          echo "Creating cucumber.properties file..."
          mkdir -p src/test/resources
          echo "cucumber.publish.enabled=true" > src/test/resources/cucumber.properties
          echo "cucumber.publish.quiet=false" >> src/test/resources/cucumber.properties
        fi
        
        # Run tests and capture output to find report URL
        mvn clean install 2>&1 | tee test_output.log || {
          echo "Tests completed with some failures"
        }
        
        # Extract Cucumber report URL from logs
        CUCUMBER_URL=$(grep -oP "https://reports\.cucumber\.io/reports/[a-f0-9-]+" test_output.log | head -1 || echo "")
        if [ ! -z "$CUCUMBER_URL" ]; then
          echo "CUCUMBER_REPORT_URL=$CUCUMBER_URL" >> $GITHUB_ENV
          echo "🥒 Cucumber Report URL: $CUCUMBER_URL"
          echo "$CUCUMBER_URL" > cucumber_report_url.txt
        else
          echo "CUCUMBER_REPORT_URL=" >> $GITHUB_ENV
          echo "No Cucumber report URL found in logs"
        fi
    
    # 12. Generate test reports
    - name: Generate Test Reports
      run: |
        cd tests
        # Generate Cucumber reports
        mvn verify -DskipTests || true
        
        # Debug: List all files in target directory
        echo "=== Listing target directory contents ==="
        find target -type f -name "*.html" -o -name "*.json" -o -name "*.xml" | head -20 || echo "No report files found"
    
    # 13. Create Report Summary File
    - name: Create Report Summary
      run: |
        cd tests
        echo "# 🧪 E2E Test Results Summary" > test_summary.md
        echo "" >> test_summary.md
        echo "## 📊 Test Reports" >> test_summary.md
        echo "" >> test_summary.md
        
        if [ ! -z "$CUCUMBER_REPORT_URL" ]; then
          echo "### 🥒 Online Cucumber Report" >> test_summary.md
          echo "**Live Report URL:** [$CUCUMBER_REPORT_URL]($CUCUMBER_REPORT_URL)" >> test_summary.md
          echo "" >> test_summary.md
        else
          echo "### ⚠️ Online Cucumber Report" >> test_summary.md
          echo "No online report URL was generated. Check the logs for details." >> test_summary.md
          echo "" >> test_summary.md
        fi
        
        echo "### 📁 Downloaded Reports" >> test_summary.md
        echo "- **cucumber-html-report**: HTML formatında detaylı test raporları" >> test_summary.md
        echo "- **comprehensive-test-reports**: Tüm test dosyaları (JSON, XML, HTML)" >> test_summary.md
        echo "" >> test_summary.md
        
        echo "### 📸 Screenshots" >> test_summary.md
        echo "Test başarısız olması durumunda ekran görüntüleri `test-screenshots` artifact'ında bulunur." >> test_summary.md
        echo "" >> test_summary.md
        
        echo "**Test Execution Time:** $(date)" >> test_summary.md
        echo "**Repository:** ${{ github.repository }}" >> test_summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> test_summary.md
    
    # 14. Upload Test Summary as Artifact
    - name: Upload Test Summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-summary-report
        path: |
          tests/test_summary.md
          tests/cucumber_report_url.txt
        retention-days: 30
    
    # 15. Upload Cucumber HTML Report
    - name: Upload Cucumber HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cucumber-html-report
        path: |
          tests/target/**/*cucumber*.html
          tests/target/**/*report*.html
        retention-days: 30
    
    # 16. Upload comprehensive test reports
    - name: Upload All Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-reports
        path: |
          tests/target/
        retention-days: 30
    
    # 17. Upload screenshots on failure
    - name: Upload Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-screenshots
        path: tests/screenshots/
        retention-days: 7
    
    # 18. Create Job Summary with Report Links
    - name: Create Job Summary
      if: always()
      run: |
        echo "# 🧪 E2E Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -z "$CUCUMBER_REPORT_URL" ]; then
          echo "## 🥒 Live Cucumber Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🔗 [View Online Cucumber Report]($CUCUMBER_REPORT_URL)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> 📋 Bu rapor canlı olup, test sonuçlarını interaktif şekilde görüntüleyebilirsiniz." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "## 📁 Downloadable Reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Report Type | Description |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| 📋 test-summary-report | Test özeti ve rapor linkleri |" >> $GITHUB_STEP_SUMMARY
        echo "| 🥒 cucumber-html-report | HTML formatında Cucumber raporları |" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 comprehensive-test-reports | Tüm test dosyaları ve raporları |" >> $GITHUB_STEP_SUMMARY
        echo "| 📸 test-screenshots | Hata durumunda ekran görüntüleri |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**💡 İpucu:** Artifacts bölümünden raporları indirebilirsiniz." >> $GITHUB_STEP_SUMMARY
    
    # 19. Comment PR with enhanced test results
    - name: Comment Test Results on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          
          let reportComment = '# 🧪 E2E Test Results\n\n';
          
          // Add Cucumber report link if available
          const cucumberUrl = process.env.CUCUMBER_REPORT_URL;
          if (cucumberUrl) {
            reportComment += '## 🥒 Live Cucumber Report\n';
            reportComment += `**🔗 [View Interactive Cucumber Report](${cucumberUrl})**\n\n`;
            reportComment += '> 📋 Bu rapor canlı olup, test sonuçlarını detaylı şekilde inceleyebilirsiniz.\n\n';
          }
          
          reportComment += '## 📊 Available Reports\n\n';
          reportComment += '| 📁 Artifact | 📝 Description |\n';
          reportComment += '|-------------|----------------|\n';
          reportComment += '| 📋 `test-summary-report` | Test özeti ve tüm rapor linkleri |\n';
          reportComment += '| 🥒 `cucumber-html-report` | HTML formatında Cucumber raporları |\n';
          reportComment += '| 📊 `comprehensive-test-reports` | Tüm test dosyaları (JSON, XML, HTML) |\n';
          reportComment += '| 📸 `test-screenshots` | Hata durumunda ekran görüntüleri |\n\n';
          
          reportComment += '**💡 İpucu:** Yukarıdaki Artifacts bölümünden istediğiniz raporu indirebilirsiniz.\n\n';
          reportComment += `**⏰ Test Execution:** ${new Date().toLocaleString()}\n`;
          reportComment += `**🌿 Branch:** ${context.ref.replace('refs/heads/', '')}\n`;
          reportComment += `**🔗 [View Full Workflow Run](${context.payload.pull_request.html_url}/checks)`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reportComment
          });
    
    # 20. Cleanup background processes
    - name: Cleanup Background Processes
      if: always()
      run: |
        # Kill backend process
        if [ -f app/backend/backend.pid ]; then
          kill $(cat app/backend/backend.pid) || true
        fi
        # Kill frontend process  
        if [ -f app/frontend/frontend.pid ]; then
          kill $(cat app/frontend/frontend.pid) || true
        fi
        # Kill any remaining processes on ports 3000 and 3001
        sudo kill -9 $(sudo lsof -t -i:3000) || true
        sudo kill -9 $(sudo lsof -t -i:3001) || true
